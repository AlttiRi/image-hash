import {ANSI_BLUE, t} from "../tester.ts";
import {binaryToUi8a} from "@/util.ts";

console.log(ANSI_BLUE("--- Binary to Hash ---"));



const b = (bin: string): string => binaryToUi8a(bin).join(" ");
t({
    result: b("0"),
    expect: "0",
});
t({
    result: b("1"),
    expect: "1",
});
t({
    result: b("0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111"),
    expect: "255 255 255 255 255 255 255 255",
});
t({
    result: b("11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111"),
    expect: "255 255 255 255 255 255 255 255",
});
t({
    result: b("11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111"),
    expect: "255 255 255 255 255 255 255 255",
});
t({
    result: b("1111111111111111111111111111111111111111111111111111111111111111"),
    expect: "255 255 255 255 255 255 255 255",
});
t({
    result: b("01111111111111111111111111111111111111111111111111111111111111111"),
    expect: "0 255 255 255 255 255 255 255 255",
});
t({
    result: b("0001111111111111111111111111111111111111111111111111111111111111111"),
    expect: "0 255 255 255 255 255 255 255 255",
});
t({
    result: b("0000 00001111111111111111111111111111111111111111111111111111111111111111"),
    expect: "0 255 255 255 255 255 255 255 255",
});
t({
    result: b("000000001111111111111111111111111111111111111111111111111111111111111111"),
    expect: "0 255 255 255 255 255 255 255 255",
});
t({
    result: b("0000000000000000000000000000000000000000000000000000000000000000"),
    expect: "0 0 0 0 0 0 0 0",
});
t({
    result: b("1111111100000000000000000000000000000000000000000000000000000000"),
    expect: "255 0 0 0 0 0 0 0",
});
t({
    result: b("1111111111111111111111111111111100000000000000000000000000000000"),
    expect: "255 255 255 255 0 0 0 0",
});
t({
    result: b("1010101010101010101010101010101010101010101010101010101010101010"),
    expect: "170 170 170 170 170 170 170 170",
});
t({
    result: b("1110101011101010101010101011111010101011101010101110101011111010"),
    expect: "234 234 170 190 171 170 234 250",
});

t({
    result: b("0000000000010000000000000010000001000010100001101111111111111110"),
    expect: "0 16 0 32 66 134 255 254",
    name: "a"
});
t({
    result: b("00000000_00010000_00000000_00100000_01000010_10000110_11111111_11111110"),
    expect: "0 16 0 32 66 134 255 254",
});
t({
    result: b("0011100010011100000011100110001101000011100001110100001011100110"),
    expect: "56 156 14 99 67 135 66 230",
    name: "b"
});
t({
    result: b("00111000_10011100_00001110_01100011_01000011_10000111_01000010_11100110"),
    expect: "56 156 14 99 67 135 66 230",
});
t({
    result: b("1111000000110000101110001100111010000110010011001000111010001110"),
    expect: "240 48 184 206 134 76 142 142",
    name: "d"
});
t({
    result: b("11110000_00110000_10111000_11001110_10000110_01001100_10001110_10001110"),
    expect: "240 48 184 206 134 76 142 142",
});
t({
    result: b("0000000010011100000011000110001101000010100001111111111111111111"),
    expect: "0 156 12 99 66 135 255 255",
    name: "m"
});
t({
    result: b("00000000_10011100_00001100_01100011_01000010_10000111_11111111_11111111"),
    expect: "0 156 12 99 66 135 255 255",
});
t({
    result: b("1010010010101101100110011011001101100010100100000111011010101110"),
    expect: "164 173 153 179 98 144 118 174",
    name: "p"
});
t({
    result: b("10100100_10101101_10011001_10110011_01100010_10010000_01110110_10101110"),
    expect: "164 173 153 179 98 144 118 174",
});
t({
    result: b("0000010110111001111110011111101111111010000000000000011100000101"),
    expect: "5 185 249 251 250 0 7 5",
    name: "w"
});
t({
    result: b("00000101_10111001_11111001_11111011_11111010_00000000_00000111_00000101"),
    expect: "5 185 249 251 250 0 7 5",
});
